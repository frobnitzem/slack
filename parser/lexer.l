%option reentrant
%option prefix="tce2_"
%option bison-bridge
%option bison-locations
%option noyywrap
%option yylineno
%option nodefault

%{
   /* Many thanks to Edsko de Vries for writing up his experience
    * with the open-source PHP compiler in August 2006:
    * Writing a Reentrant Parser with Flex and Bison
    * http://www.phpcompiler.org/articles/reentrantparser.html
    */
   #include "parser.h"
   #include "parser.tab.h"

   #define YY_EXTRA_TYPE struct Lexer_Context*
   #define YY_USER_ACTION yylloc->first_line = yylineno;

   #define YY_INPUT(buf,result,max_size) { \
    result = read_next(yyextra, buf, max_size); }

   size_t read_next(struct Lexer_Context *, char *, size_t);
   void tce2_error(YYLTYPE *, struct Lexer_Context *, const char *s, ...);

%}

%x COMMENT

/* some complex named patterns */
/* float exponent */
EXP     ([Ee][-+]?[0-9]+)
LEN    ([Uu](L|l|LL|ll)?|(L|l|LL|ll)[Uu]?)
/* integer length */
ILEN    ([Uu](L|l|LL|ll)?|(L|l|LL|ll)[Uu]?)

ASC     [\x00-\x7f]
ASCN    [\x00-\t\v-\x7f]
U       [\x80-\xbf]
U2      [\xc2-\xdf]
U3      [\xe0-\xef]
U4      [\xf0-\xf4]

 /* Note: UWS Skips U+2028 (line separator) and U+2029 (paragraph sep.) */ 
 /* and Ogham Space Mark (áš€ U+1680), Mongolian Vowel Separator U+180E, Ideographic Space U+3000. */

UWS     ([ \t\v-\x0d]|\xc2[\x85\xa0]|\xe2(\x80[\x80-\x8a\xaf]|\x81\x9f))
UANY    {ASC}|{U2}{U}|{U3}{U}{U}|{U4}{U}{U}{U}
UANYN   {ASCN}|{U2}{U}|{U3}{U}{U}|{U4}{U}{U}{U} 
UONLY   {U2}{U}|{U3}{U}{U}|{U4}{U}{U}{U}

UALPHA   [A-Za-z]|\xc2[\x80-\x84\x86-\x9f\xa1-\xbf]|[\xc3-\xdf]{U}|[\xe0-\xe1]{U}{U}|[\xe3-\xef]{U}{U}|\xe2(\x80[\x8b-\xad\xb0-\xbf]|\x81[\x80-\x9e\xa0-\xbf]|[\x82-\xbf]{U})
 /*
UALPHA1  ([A-Za-z]|\xc2[\xaa\xb5\xba]|\xc3[\x80-\x96\x98-\xb6\xb8-\xbf]|[\xc4-\xca][\x80-\xbf]|\xcb[\x81\x86-\x91\xa0-\xa4\xac\xae]|\xcd[\xb0-\xb4\xb6\xb7\xba-\xbd]|\xce[\x86\x88-\x8a\x8c\x8e-\xa1\xa3-\xbf]|\xcf[\xb5\xb7-\xbf]|\xd2[\x81\x8a-\xbf]|\xd3[\x80-\xbf]|\xd4[\xa7\xb1-\xbf]|\xd5[\x80-\x96\x99\xa1-\xbf]|\xd6[\x80-\x87]|\xd7[\x90-\xaa\xb0-\xb2]|\xd8[\xa0-\xbf]|\xd9[\x80-\x8a]|\xd9[\xae-\xaf\xb1-\xbf]|\xdb[\x80-\x93\x95\xa5\xa6\xae\xaf\xba-\xbc\xbf]|\xdc[\x90\x92-\xaf]|\xdd[\x8d-\xbf]|\xde[\x80-\xa5\xb1]|\xdf[\x8a-\xaa\xb4\xb5\xba])

UAL3 (\xe0(\xa0[\x80-\x95\x9a\xa4\xa8]|\xa1[\x80-\x98]|\xa2[\xa0\xa2-\xac]|\xa4[\x84-\xb9\xbd]|\xa5[\x90\x98-\xa1\xb1-\xb7\xb9-\xbf]|\xa6[\x85-\x8c\x8f\x90\x93-\xa8\xaa-\xb0\xb2\xb6-\xb9\xbd]|\xa7[\x8e\x9c\x9d\x9f-\xa1\xb0\xb1]|\xa8[\x85-\x8a\x8f\x90\x93-\xa8\xaa-\xb0\xb2\xb3\xb5\xb6\xb8\xb9]|\xa9[\x99-\x9c\x9e\xb2-\xb4]|\xaa[\x85-\x8d\x8f-\x91\x93-\xa8\xaa-\xb0\xb2\xb3\xb5-\xb9\xbd]|\xab[\x90\xa0\xa1]|\xac[\x85-\x8c\x8f\x90\x93-\xa8\xaa-\xb0\xb2\xb3\xb5-\xb9\xbd]|\xad[\x9c\x9d\x9f-\xa1\xb1]|\xae[\x83\x85-\x8a\x8e-\x90\x92-\x95\x99\x9a\x9c\x9e\x9f\xa3\xa4\xa8-\xaa\xae-\xb9]|\xaf\x90|\xb0[\x85-\x8c\x8e-\x90\x92-\xa8\xaa-\xb3\xb5-\xb9\xbd]|\xb1[\x98\x99\xa0\xa1]|\xb2[\x85-\x8c\x8e-\x90\x92-\xa8\xaa-\xb3\xb5-\xb9\xbd]|\xb3[\x9e\xa0\xa1\xb1\xb2]|\xb4[\x85-\x8c\x8e-\x90\x92-\xba\xbd]|\xb5[\x8e\xa0\xa1\xba-\xbf]|\xb6[\x85-\x96\x9a-\xb1\xb3-\xbb\xbd]|\xb7[\x80-\x86]|\xb8[\x81-\xb0\xb2\xb3]|\xb9[\x80-\x86]|\xba[\x81\x82\x84\x87\x88\x8a\x8d\x94-\x97\x99-\x9f\xa1-\xa3\xa5\xa7\xaa\xab\xad-\xb0\xb2\xb3\xbd]|\xbb[\x80-\x84\x86\x9c-\x9f]))
 TODO: |\xbc\x80 \xbd\x80-\xbd\x87 \xbd\x89-\xbd\xac \xbe\x88-\xbe\x8c)\xe1\x80\x80-\xe1\x80\xaa \xe1\x80\xbf \xe1\x81\x90-\xe1\x81\x95 \xe1\x81\x9a-\xe1\x81\x9d \xe1\x81\xa1 \xe1\x81\xa5 \xe1\x81\xa6 \xe1\x81\xae-\xe1\x81\xb0 \xe1\x81\xb5-\xe1\x82\x81 \xe1\x82\x8e \xe1\x82\xa0-\xe1\x83\x85 \xe1\x83\x87 \xe1\x83\x8d \xe1\x83\x90-\xe1\x83\xba \xe1\x83\xbc-\xe1\x89\x88 \xe1\x89\x8a-\xe1\x89\x8d \xe1\x89\x90-\xe1\x89\x96 \xe1\x89\x98 \xe1\x89\x9a-\xe1\x89\x9d \xe1\x89\xa0-\xe1\x8a\x88 \xe1\x8a\x8a-\xe1\x8a\x8d \xe1\x8a\x90-\xe1\x8a\xb0 \xe1\x8a\xb2-\xe1\x8a\xb5 \xe1\x8a\xb8-\xe1\x8a\xbe \xe1\x8b\x80 \xe1\x8b\x82-\xe1\x8b\x85 \xe1\x8b\x88-\xe1\x8b\x96 \xe1\x8b\x98-\xe1\x8c\x90 \xe1\x8c\x92-\xe1\x8c\x95 \xe1\x8c\x98-\xe1\x8d\x9a \xe1\x8e\x80-\xe1\x8e\x8f \xe1\x8e\xa0-\xe1\x8f\xb4 \xe1\x90\x81-\xe1\x99\xac \xe1\x99\xaf-\xe1\x99\xbf \xe1\x9a\x81-\xe1\x9a\x9a \xe1\x9a\xa0-\xe1\x9b\xaa \xe1\x9c\x80-\xe1\x9c\x8c \xe1\x9c\x8e-\xe1\x9c\x91 \xe1\x9c\xa0-\xe1\x9c\xb1 \xe1\x9d\x80-\xe1\x9d\x91 \xe1\x9d\xa0-\xe1\x9d\xac \xe1\x9d\xae-\xe1\x9d\xb0 \xe1\x9e\x80-\xe1\x9e\xb3 \xe1\x9f\x97 \xe1\x9f\x9c \xe1\xa0\xa0-\xe1\xa1\xb7 \xe1\xa2\x80-\xe1\xa2\xa8 \xe1\xa2\xaa \xe1\xa2\xb0-\xe1\xa3\xb5 \xe1\xa4\x80-\xe1\xa4\x9c \xe1\xa5\x90-\xe1\xa5\xad \xe1\xa5\xb0-\xe1\xa5\xb4 \xe1\xa6\x80-\xe1\xa6\xab \xe1\xa7\x81-\xe1\xa7\x87 \xe1\xa8\x80-\xe1\xa8\x96 \xe1\xa8\xa0-\xe1\xa9\x94 \xe1\xaa\xa7 \xe1\xac\x85-\xe1\xac\xb3 \xe1\xad\x85-\xe1\xad\x8b \xe1\xae\x83-\xe1\xae\xa0 \xe1\xae\xae \xe1\xae\xaf \xe1\xae\xba-\xe1\xaf\xa5 \xe1\xb0\x80-\xe1\xb0\xa3 \xe1\xb1\x8d-\xe1\xb1\x8f \xe1\xb1\x9a-\xe1\xb1\xbd \xe1\xb3\xa9-\xe1\xb3\xac \xe1\xb3\xae-\xe1\xb3\xb1 \xe1\xb3\xb5 \xe1\xb3\xb6 \xe1\xb4\x80-\xe1\xb6\xbf \xe1\xb8\x80-\xe1\xbc\x95 \xe1\xbc\x98-\xe1\xbc\x9d \xe1\xbc\xa0-\xe1\xbd\x85 \xe1\xbd\x88-\xe1\xbd\x8d \xe1\xbd\x90-\xe1\xbd\x97 \xe1\xbd\x99 \xe1\xbd\x9b \xe1\xbd\x9d \xe1\xbd\x9f-\xe1\xbd\xbd \xe1\xbe\x80-\xe1\xbe\xb4 \xe1\xbe\xb6-\xe1\xbe\xbc \xe1\xbe\xbe \xe1\xbf\x82-\xe1\xbf\x84 \xe1\xbf\x86-\xe1\xbf\x8c \xe1\xbf\x90-\xe1\xbf\x93 \xe1\xbf\x96-\xe1\xbf\x9b \xe1\xbf\xa0-\xe1\xbf\xac \xe1\xbf\xb2-\xe1\xbf\xb4 \xe1\xbf\xb6-\xe1\xbf\xbc \xe2\x81\xb1 \xe2\x81\xbf \xe2\x82\x90-\xe2\x82\x9c \xe2\x84\x82 \xe2\x84\x87 \xe2\x84\x8a-\xe2\x84\x93 \xe2\x84\x95 \xe2\x84\x99-\xe2\x84\x9d \xe2\x84\xa4 \xe2\x84\xa6 \xe2\x84\xa8 \xe2\x84\xaa-\xe2\x84\xad \xe2\x84\xaf-\xe2\x84\xb9 \xe2\x84\xbc-\xe2\x84\xbf \xe2\x85\x85-\xe2\x85\x89 \xe2\x85\x8e \xe2\x86\x83 \xe2\x86\x84 \xe2\xb0\x80-\xe2\xb0\xae \xe2\xb0\xb0-\xe2\xb1\x9e \xe2\xb1\xa0-\xe2\xb3\xa4 \xe2\xb3\xab-\xe2\xb3\xae \xe2\xb3\xb2 \xe2\xb3\xb3 \xe2\xb4\x80-\xe2\xb4\xa5 \xe2\xb4\xa7 \xe2\xb4\xad \xe2\xb4\xb0-\xe2\xb5\xa7 \xe2\xb5\xaf \xe2\xb6\x80-\xe2\xb6\x96 \xe2\xb6\xa0-\xe2\xb6\xa6 \xe2\xb6\xa8-\xe2\xb6\xae \xe2\xb6\xb0-\xe2\xb6\xb6 \xe2\xb6\xb8-\xe2\xb6\xbe \xe2\xb7\x80-\xe2\xb7\x86 \xe2\xb7\x88-\xe2\xb7\x8e \xe2\xb7\x90-\xe2\xb7\x96 \xe2\xb7\x98-\xe2\xb7\x9e \xe2\xb8\xaf \xe3\x80\x85 \xe3\x80\x86 \xe3\x80\xb1-\xe3\x80\xb5 \xe3\x80\xbb \xe3\x80\xbc \xe3\x81\x81-\xe3\x82\x96 \xe3\x82\x9d-\xe3\x82\x9f \xe3\x82\xa1-\xe3\x83\xba \xe3\x83\xbc-\xe3\x83\xbf \xe3\x84\x85-\xe3\x84\xad \xe3\x84\xb1-\xe3\x86\x8e \xe3\x86\xa0-\xe3\x86\xba \xe3\x87\xb0-\xe3\x87\xbf \xe3\x90\x80-\xe4\xb6\xb5 \xe4\xb8\x80-\xe9\xbf\x8c \xea\x80\x80-\xea\x92\x8c \xea\x93\x90-\xea\x93\xbd \xea\x94\x80-\xea\x98\x8c \xea\x98\x90-\xea\x98\x9f \xea\x98\xaa \xea\x98\xab \xea\x99\x80-\xea\x99\xae \xea\x99\xbf-\xea\x9a\x97 \xea\x9a\xa0-\xea\x9b\xa5 \xea\x9c\x97-\xea\x9c\x9f \xea\x9c\xa2-\xea\x9e\x88 \xea\x9e\x8b-\xea\x9e\x8e \xea\x9e\x90-\xea\x9e\x93 \xea\x9e\xa0-\xea\x9e\xaa \xea\x9f\xb8-\xea\xa0\x81 \xea\xa0\x83-\xea\xa0\x85 \xea\xa0\x87-\xea\xa0\x8a \xea\xa0\x8c-\xea\xa0\xa2 \xea\xa1\x80-\xea\xa1\xb3 \xea\xa2\x82-\xea\xa2\xb3 \xea\xa3\xb2-\xea\xa3\xb7 \xea\xa3\xbb \xea\xa4\x8a-\xea\xa4\xa5 \xea\xa4\xb0-\xea\xa5\x86 \xea\xa5\xa0-\xea\xa5\xbc \xea\xa6\x84-\xea\xa6\xb2 \xea\xa7\x8f \xea\xa8\x80-\xea\xa8\xa8 \xea\xa9\x80-\xea\xa9\x82 \xea\xa9\x84-\xea\xa9\x8b \xea\xa9\xa0-\xea\xa9\xb6 \xea\xa9\xba \xea\xaa\x80-\xea\xaa\xaf \xea\xaa\xb1 \xea\xaa\xb5 \xea\xaa\xb6 \xea\xaa\xb9-\xea\xaa\xbd \xea\xab\x80 \xea\xab\x82 \xea\xab\x9b-\xea\xab\x9d \xea\xab\xa0-\xea\xab\xaa \xea\xab\xb2-\xea\xab\xb4 \xea\xac\x81-\xea\xac\x86 \xea\xac\x89-\xea\xac\x8e \xea\xac\x91-\xea\xac\x96 \xea\xac\xa0-\xea\xac\xa6 \xea\xac\xa8-\xea\xac\xae \xea\xaf\x80-\xea\xaf\xa2 \xea\xb0\x80-\xed\x9e\xa3 \xed\x9e\xb0-\xed\x9f\x86 \xed\x9f\x8b-\xed\x9f\xbb \xef\xa4\x80-\xef\xa9\xad \xef\xa9\xb0-\xef\xab\x99 \xef\xac\x80-\xef\xac\x86 \xef\xac\x93-\xef\xac\x97 \xef\xac\x9d \xef\xac\x9f-\xef\xac\xa8 \xef\xac\xaa-\xef\xac\xb6 \xef\xac\xb8-\xef\xac\xbc \xef\xac\xbe \xef\xad\x80 \xef\xad\x81 \xef\xad\x83 \xef\xad\x84 \xef\xad\x86-\xef\xae\xb1 \xef\xaf\x93-\xef\xb4\xbd \xef\xb5\x90-\xef\xb6\x8f \xef\xb6\x92-\xef\xb7\x87 \xef\xb7\xb0-\xef\xb7\xbb \xef\xb9\xb0-\xef\xb9\xb4 \xef\xb9\xb6-\xef\xbb\xbc \xef\xbc\xa1-\xef\xbc\xba \xef\xbd\x81-\xef\xbd\x9a \xef\xbd\xa6-\xef\xbe\xbe \xef\xbf\x82-\xef\xbf\x87 \xef\xbf\x8a-\xef\xbf\x8f \xef\xbf\x92-\xef\xbf\x97 \xef\xbf\x9a-\xef\xbf\x9c */

 /* UALPHA {UALPHA1}|{UAL3} */

%%
"*" |
"+" |
"-" |
"_" |
"^" |
"," |
"="  	{ return yytext[0]; }
"&" |
"\\left" |
"\\right" { /* ignore formatting characters */ }
"\\sum"  { return SUM; }
"rand"   { return RAND; }
"zero"   { return ZERO; }
"{" |
"("	{ yyextra->nest += 1; return yytext[0]; }
"["     { yyextra->nest += 1; return '('; }
"}" |
")"	{ yyextra->nest -= 1; return yytext[0]; }
"]"     { yyextra->nest -= 1; return ')'; }
 /*\n({UWS}*\n)* { if(yyextra->nest <= 0) {yyextra->nest = 0; return EOL;} } */
\n({UWS}*\n)* { if(yyextra->nest <= 0) { yyextra->nest = 0; } }
"\\\\"  { return EOL; }
{UWS}   { /* ignore whitespace */ }

 /* comments */
"/*"        { yyextra->esc_depth = 1; BEGIN(COMMENT); }
<COMMENT>"*/" {
              yyextra->esc_depth--;
              if(yyextra->esc_depth == 0) {
                 //yylval->cptr = strndup(yytext, yyleng-1); 
                 BEGIN(INITIAL); 
              } else {
                 yymore();
              }
           }
<COMMENT>"/*"   { yyextra->esc_depth++; yymore(); }
<COMMENT>[^/]   { } /* yymore(); } */
<COMMENT>\/[^*]  { } /* yymore(); } */
<COMMENT><<EOF>>        { printf("%d: Unterminated comment\n",
                            yylineno); return 0; }

\%[^\n]*\n	{ /* ignore comments */ }

 /* Support Latex's quirky behavior with chars outside of {}-s */
{UALPHA} { yylval->str = strdup(yytext);
           return CHAR;
         }

 /* integers */
0[0-7]*{ILEN}? |
-?[1-9][0-9]*{ILEN}? {
            yylval->i = atoi(yytext);
            return INT;
        }
0[Xx][0-9a-fA-F]+{ILEN}? {
            yylval->i = strtol(yytext+2, (char **)NULL, 16);
            return INT;
        }

 /* decimal float */
-?([0-9]*\.[0-9]+|[0-9]+\.){EXP}?[flFL]? |
-?[0-9]+{EXP}[flFL]? |
 /* hex float */
0[Xx]([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.?)[Pp][-+]?[0-9]+[flFL]? {
            yylval->f = atof(yytext);
            return FLOAT;
        }

 /* string literal */
\"([^"\\]|\\['"?\\abfnrtv]|\\[0-7]{1,3}|\\[Xx][0-9a-fA-F]+)*\" {
            int len = strlen(yytext);
            yytext[len-1] = 0;
            yylval->str = strdup(yytext+1);
            return STRING;
        }

.       {
            tce2_error(yylloc, yyextra, "Mystery character '%c'.\n", *yytext);
        }
%%
/*
main(argc, argv)
int argc;
char **argv;
{
  if(argc > 1) {
    if(!(yyin = fopen(argv[1], "r"))) {
      perror(argv[1]);
      return (1);
    }
  }
  yylex();
  printf("%8d%8d%8d\n", lines, words, chars);
}
}*/

void tce2_lex_ctor(struct Lexer_Context *t) {
   yylex_init(&t->scanner);
   yyset_extra(t, t->scanner);
}

void tce2_lex_dtor(struct Lexer_Context *t) {
   yylex_destroy(t->scanner);
}

void tce2_error(YYLTYPE *llocp, struct Lexer_Context *ctxt, const char *s, ...) {
  va_list ap;
  va_start(ap, s);
  fprintf(stderr, "%d: error: ", llocp->first_line);
  vfprintf(stderr, s, ap);
  fprintf(stderr, "\n");
  va_end(ap);
}

size_t read_next(struct Lexer_Context *ctxt, char *buf, size_t max_size) {
      size_t ret;

    if(ctxt->file == stdin) {
        if(fgets(buf, max_size, ctxt->file) == NULL) {
            return YY_NULL;
        }
        ret = strlen(buf);
        return strlen(buf); // triple parse
    } else if( (ret = fread(buf, 1, max_size, ctxt->file)) == 0) {
        //fclose(ctxt->file);
        ctxt->file = NULL;
        return YY_NULL;
    } else {
        return ret;
    }
}
